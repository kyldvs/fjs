exports[`test binary_expression_chains 1`] = `
"
this_is_a_long_identifier +
this_is_another_long_identifier -
here_is_one_more_of_them +
and_another;

t(
this_is_a_long_identifier +
this_is_another_long_identifier -
here_is_one_more_of_them +
and_another);

t(
this_is_a_long_identifier +
(this_is_another_long_identifier - here_is_one_more_of_them) +
and_another);
"
`;

exports[`test breaks_function_calls 1`] = `
"fooo(one, two, three, four, five, six, seven, eight, nine, ten, eleven, twelve);
foooo(
  one,
  two,
  three,
  four,
  five,
  six,
  seven,
  eight,
  nine,
  ten,
  eleven,
  twelve,
);
"
`;

exports[`test changes-quotes 1`] = `
"let x = \'foobar\';
x = \'foobar\';
x = \'\"\';
x = \'\"\';
x = \'\\\'\';
x = \'\\\'\';
"
`;

exports[`test code_01 1`] = `
"/**
 * Copyright 2004-present Facebook. All Rights Reserved.
 */

\'use strict\';

import Tokens from \'./Tokens\';

import comments from \'./printers/comments\';
import expressions from \'./printers/expressions\';
import literals from \'./printers/literals\';
import misc from \'./printers/misc\';
import statements from \'./printers/statements\';

/**
 * Printers convert an AST into tokens which may then be formatted.
 */
export default function getPrinters(x, y, z) {
  return {
    ...comments,
    ...expressions,
    ...literals,
    ...misc,
    ...statements,
    ...thisissomethingreallylongthatwillbreak,
  };
};
"
`;

exports[`test code_02 1`] = `
"x;
// There should be no extra new lines in between these statements.
x;
"
`;

exports[`test complex_conditionals 1`] = `
"foo ? bar : baz;
this_is_a_long_identifier
  ? [with_some_array_elements, that_will_break]
  : [here, is, another, array_that_has_things];
this_is_a_long_identifier
  ? [
    this_array_is_also_really_long,
    so_it_will_also_need_to_break,
    independently_of_whether_or_not_the_conditional,
    needs_to_break,
  ]
  : [here, is, another, array_that_has_things, it_might_not, need_to_break];
"
`;

exports[`test flux_reduce_store 1`] = `
"/**
 * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule FluxReduceStore
 * @flow
 */

\'use strict\';

import Dispatcher from \'Dispatcher\';

const FluxStore = require(\'FluxStore\');

const abstractMethod = require(\'abstractMethod\');
const invariant = require(\'invariant\');

/**
 * This is the basic building block of a Flux application. All of your stores
 * should extend this class.
 *
 *   class CounterStore extends FluxReduceStore<number> {
 *     getInitialState(): number {
 *       return 1;
 *     }
 *
 *     reduce(state: number, action: Object): number {
 *       switch(action.type) {
 *         case: \'add\':
 *           return state + action.value;
 *         case: \'double\':
 *           return state * 2;
 *         default:
 *           return state;
 *       }
 *     }
 *   }
 */
class FluxReduceStore<TState> extends FluxStore {
  _state: TState;

  constructor(dispatcher: Dispatcher) {
    super(dispatcher);
    this._state = this.getInitialState();
  }

  /**
   * Getter that exposes the entire state of this store. If your state is not
   * immutable you should override this and not expose _state directly.
   */
  getState(): TState {
    return this._state;
  }

  /**
   * Constructs the initial state for this store. This is called once during
   * construction of the store.
   */
  getInitialState(): TState {
    return abstractMethod(\'FluxReduceStore\', \'getInitialState\');
  }

  /**
   * Used to reduce a stream of actions coming from the dispatcher into a
   * single state object.
   */
  reduce(state: TState, action: Object): TState {
    return abstractMethod(\'FluxReduceStore\', \'reduce\');
  }

  /**
   * Checks if two versions of state are the same. You do not need to override
   * this if your state is immutable.
   */
  areEqual(one: TState, two: TState): boolean {
    return one === two;
  }

  __invokeOnDispatch(action: Object): void {
    this.__changed = false;

    // Reduce the stream of incoming actions to state, update when necessary.
    const startingState = this._state;
    const endingState = this.reduce(startingState, action);

    // This means your ending state should never be undefined.
    invariant(
      endingState !== undefined,
      \'%s returned undefined from reduce(...), did you forget to return \' +
      \'state in the default case? (use null if this was intentional)\',
      this.constructor.name,
    );

    if (!this.areEqual(startingState, endingState)) {
      this._state = endingState;

      // \`__emitChange()\` sets \`this.__changed\` to true and then the actual
      // change will be fired from the emitter at the end of the dispatch, this
      // is required in order to support methods like \`hasChanged()\`
      this.__emitChange();
    }

    if (this.__changed) {
      this.__emitter.emit(this.__changeEvent);
    }
  }
}

module.exports = FluxReduceStore;
"
`;

exports[`test large-numbers 1`] = `
"100000000000000000000123456789;
"
`;

exports[`test logical_expression_chains 1`] = `
"foo || bar && baz;

(
  this_is_a_long_identifier ||
  this_is_another_one &&
  this_one_is_too ||
  one_more_short_one
);

(
  this_is_a_long_identifier ||
  this_is_another_one &&
  this_one_is_too ||
  one_more_short_one
);

(
  this_is_a_naked_chain ||
  of_logical_expressions ||
  we_should_wrap_this ||
  in_parenthesis_when_it_breaks
);

(
  this_is_a_naked_chain ||
  (these_are_some_ands && that_fit_on_one_line) ||
  this_is_a_naked_chain_2
);

this_is_a_naked_chain || (
  these_are_some_ands &&
  and_there_are_so_many &&
  of_them_that_they_will_also &&
  need_to_be_broken_up &&
  after_the_first_chain
) || this_is_a_naked_chain_2;

if (
  this_is_a_long_identifier ||
  this_is_another_one &&
  this_one_is_too ||
  one_more_short_one
) {
  (
    this_is_a_long_identifier ||
    this_is_another_one &&
    this_one_is_too ||
    one_more_short_one
  );
}

(
  this_is_a_long_identifier ||
  this_is_another_one &&
  this_one_is_too ||
  one_more_short_one
)();

(
  this_is_a_long_identifier ||
  this_is_another_one &&
  this_one_is_too ||
  one_more_short_one
)(
  this_is_a_long_identifier ||
  this_is_another_one &&
  this_one_is_too ||
  one_more_short_one
);

(
  this_is_a_long_identifier ||
  this_is_another_one &&
  this_one_is_too ||
  one_more_short_one
)((
  this_is_a_long_identifier ||
  this_is_another_one &&
  this_one_is_too ||
  one_more_short_one
));

foo(
  long_identifier_foo ||
  long_identifier_foo ||
  long_identifier_foo ||
  bar(
    long_identifier_bar ||
    long_identifier_bar ||
    long_identifier_bar ||
    baz(long_identifier_baz, long_identifier_baz, long_identifier_baz, buz(
      long_identifier_buz ||
      long_identifier_buz ||
      long_identifier_buz ||
      long_identifier_buz ||
      long_identifier_buz ||
      long_identifier_buz,
    ), long_identifier_baz, long_identifier_baz, long_identifier_baz) ||
    long_identifier_bar ||
    long_identifier_bar ||
    long_identifier_bar,
  ) ||
  long_identifier_foo ||
  long_identifier_foo ||
  long_identifier_foo
);
"
`;

exports[`test simple-block-comment 1`] = `
"/*
 * comment
 */
1 + 1;
"
`;

exports[`test simple-comment 1`] = `
"// This is a comment
1 + 1;
"
`;

exports[`test simple-scope-breaking 1`] = `
"const foo = {
  meh: \'reasonably long value\',
  meh2: \'this one will make things wrap, hopefully...\',
};
"
`;

exports[`test string-escapes 1`] = `
"let x = \'\\\\\\\\\\\\\\\'\';
"
`;

exports[`test variable-declarations 1`] = `
"var foo, bar;
var baz;
let buz = 1;
const qux = { one: 1, two: 2 };
"
`;

exports[`test works 1`] = `
"1 + 1;
"
`;
